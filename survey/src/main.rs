#[macro_use]
extern crate lazy_static;
#[macro_use]
extern crate serde_derive;

mod advisory;
mod package;
mod scan;
#[cfg(test)]
mod tests;
mod ticket;
mod tracker;

use crate::scan::{Branch, Branches};
use crate::tracker::Tracker;

use colored::*;
use snafu::{ResultExt, Snafu};
use std::borrow::Borrow;
use std::error::Error as StdError;
use std::fs;
use std::io;
use std::ops::Deref;
use std::path::PathBuf;
use std::result;
use structopt::StructOpt;

#[derive(Debug, Clone, StructOpt, Default)]
#[structopt(rename_all = "kebab")]
pub struct Opt {
    /// Path to `nixpkgs` checkout
    #[structopt(
        short,
        long,
        value_name = "PATH",
        default_value = "../nixpkgs-channels",
        parse(from_os_str)
    )]
    nixpkgs: PathBuf,
    /// Base directory for vulnix JSON outputs and tickets (excluding iteration subdir)
    #[structopt(
        short = "o",
        long = "outdir",
        value_name = "DIR",
        default_value = "./iterations",
        parse(from_os_str)
    )]
    basedir: PathBuf,
    /// Directory for updated whitelists (expected to be pushed to `whitelist_url` eventually)
    #[structopt(
        short = "w",
        long,
        value_name = "DIR",
        default_value = "whitelists",
        parse(from_os_str)
    )]
    whitelist_dir: PathBuf,
    /// Base URL to load current whitelists from (release name will be appended)
    #[structopt(
        short = "W",
        long,
        value_name = "URL",
        default_value = "https://raw.githubusercontent.com/ckauhaus/nixos-vulnerability-roundup/\
                         master/whitelists"
    )]
    whitelist_url: String,
    /// Path to `vulnix` executable
    #[structopt(
        short,
        long,
        value_name = "PATH",
        default_value = "vulnix",
        parse(from_os_str)
    )]
    vulnix: PathBuf,
    /// Don't run vulnix (expects vulnix JSON output already present in release dir)
    #[structopt(short = "R", long)]
    no_run: bool,
    /// Create GitHub issues in this repository
    #[structopt(short, long, value_name = "USER/REPO")]
    repo: Option<String>,
    /// GitHub access token
    #[structopt(short, long)]
    github_token: Option<String>,
    /// Nth survey iteration
    #[structopt(value_name = "N")]
    iteration: u32,
    /// List of nixpkgs branches to scan
    ///
    /// Format: BRANCH=COMMITID or just BRANCH (uses
    /// current branch head).
    ///
    /// Examples: "nixos-unstable=55f4cd48" or "nixos-18.09"
    #[structopt(value_name = "BRANCHES", required = true)]
    branches: Vec<Branch>,
}

impl Opt {
    /// Constructs per-iteration directory from basedir and iteration number
    pub fn iterdir(&self) -> PathBuf {
        self.basedir.join(self.iteration.to_string())
    }
}

#[derive(Debug, Snafu)]
enum Error {
    #[snafu(display("Cannot write ticket to file '{}'", file.display()))]
    WriteError { file: PathBuf, source: io::Error },
}

fn run() -> result::Result<(), Box<dyn StdError>> {
    dotenv::dotenv().ok();
    let opt = Opt::from_args();
    let branches = Branches::with_repo(&opt.branches, &opt.nixpkgs)?;
    let dir = opt.iterdir();
    let tracker = match &opt.repo {
        Some(repo) => {
            let token = opt.github_token.as_ref().map(Deref::deref);
            Some(Tracker::connect_github(&repo, token)?)
        }
        None => None,
    };
    let scan_res = if opt.no_run {
        branches.load(&dir)?
    } else {
        branches.scan(&opt)?
    };
    println!("{}", "* Creating tickets...".green());
    for tkt in ticket::ticket_list(opt.iteration, scan_res) {
        let f = dir.join(tkt.file_name());
        if f.exists() {
            println!("{}: skipping, file exists", tkt.name());
            continue;
        }
        print!("{}: ", tkt.name().yellow());
        if let Some(t) = tracker.borrow() {
            let issue_id = t.create_issue(&tkt)?;
            print!("{} ", issue_id);
        } else {
            fs::write(&f, tkt.to_string()).context(WriteError { file: f })?;
            println!("wrote '{}'", tkt.file_name().display());
        }
    }
    Ok(())
}

fn main() {
    if let Err(err) = run() {
        eprintln!("{} {}", "Error:".red().bold(), err);
        if let Some(source) = err.source() {
            eprintln!("{}", source);
        }
        std::process::exit(1);
    }
}
