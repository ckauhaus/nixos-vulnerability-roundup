use crate::advisory::Advisory;
use crate::scan::{Branches, VulnixRes};
use crate::MAX_BRANCHES;
use failure::Fallible;
use fixedbitset::FixedBitSet;
use std::collections::HashMap;
use std::hash::Hash;
use std::io::{self, Write};

#[derive(Debug, Clone, PartialEq, Eq)]
struct VulnByBranch {
    id: Advisory,
    // bit n is set if the nth branch from the branch list is affected
    branches: FixedBitSet,
}

impl VulnByBranch {
    /// Vulnerability with single affected branch
    fn new(id: Advisory, initial_branch: usize) -> Self {
        assert!(initial_branch < MAX_BRANCHES);
        let mut branches = FixedBitSet::with_capacity(MAX_BRANCHES);
        branches.insert(initial_branch);
        Self { id, branches }
    }

    #[cfg(test)]
    /// Vulnerability with several affected branches
    fn from_branchmap(id: Advisory, branchmap: u32) -> Self {
        let mut branches = FixedBitSet::with_capacity(MAX_BRANCHES);
        (*branches.as_mut_slice())[0] = branchmap;
        Self { id, branches }
    }

    /// Converts branch bitmap into list of release names
    fn decode<'a>(&self, branch_specs: &'a Branches) -> Vec<&'a str> {
        self.branches
            .ones()
            .map(|n| branch_specs[n].name.as_ref())
            .collect()
    }
}

pub type Packages<'a> = HashMap<&'a str, Affected<'a>>;

#[derive(Debug, Clone, Default, PartialEq, Eq)]
pub struct Affected<'a> {
    pname: &'a str,
    version: &'a str,
    map: Vec<VulnByBranch>,
}

impl<'a> Affected<'a> {
    fn new(pname: &'a str, version: &'a str) -> Self {
        Self {
            pname,
            version,
            ..Default::default()
        }
    }

    /// Writes out an issue in markdown format for a single package
    pub fn write_ticket(
        &self,
        file: &mut dyn Write,
        iteration: u32,
        branches: &Branches,
    ) -> Result<(), io::Error> {
        let num = self.map.len();
        let advisory = if num == 1 { "advisory" } else { "advisories" };
        writeln!(file, "\
# Vulnerability roundup {iteration}: {pname}-{version}: {num} {advisory}\n\
\n\
[search](https://search.nix.gsc.io/?q={pname}&i=fosho&repos=nixos-nixpkgs), \
[files](https://github.com/NixOS/nixpkgs/search?utf8=%E2%9C%93&q={pname}+in%3Apath&type=Code)\n\
", iteration=iteration, num=num, advisory=advisory, pname=self.pname, version=self.version)?;
        for vuln in &self.map {
            let applicable = vuln.decode(branches).join(", ");
            writeln!(
                file,
                "* [ ] [{adv}](https://nvd.nist.gov/vuln/detail/{adv}) ({applicable})",
                adv = vuln.id,
                applicable = applicable
            )?;
        }
        let mut relevant = Vec::new();
        for (i, b) in branches.iter().enumerate() {
            if self.map.iter().any(|m| m.branches.contains(i)) {
                relevant.push(format!("{}: {}", b.name, &b.rev[..11]))
            }
        }
        writeln!(
            file,
            "\nScanned versions: {}. May contain false positives.",
            relevant.join("; ")
        )
    }
}

/// Consolidates per-branch scan results into a per-package overview
pub fn transform<S>(scan_by_branch: &[Vec<VulnixRes<S>>]) -> Fallible<Packages>
where
    S: AsRef<str> + Hash + Eq,
{
    let mut pkgs = Packages::new();
    for (i, scan) in scan_by_branch.iter().enumerate() {
        for res in scan {
            let affected = pkgs
                .entry(res.name.as_ref())
                .or_insert_with(|| Affected::new(res.pname.as_ref(), res.version.as_ref()));
            for adv in &res.affected_by {
                let adv = adv.as_ref().parse::<Advisory>()?;
                match affected.map.iter().position(|s| s.id == adv) {
                    Some(pos) => affected.map[pos].branches.insert(i),
                    None => affected.map.push(VulnByBranch::new(adv, i)),
                }
            }
        }
    }
    Ok(pkgs)
}

// === Tests ===

#[cfg(test)]
mod test {
    use super::*;
    use crate::tests::create_branches;

    /// Helper to construct an `Affected` value easily
    fn aff<'a>(
        pname: &'a str,
        version: &'a str,
        advisories: &[&'a str],
        branchmap: &[u32],
    ) -> Affected<'a> {
        Affected {
            pname,
            version,
            map: advisories
                .iter()
                .zip(branchmap.iter())
                .map(|(a, &bm)| VulnByBranch::from_branchmap(a.parse().unwrap(), bm))
                .collect(),
        }
    }

    #[test]
    fn decode_scan_single_branch() {
        let scan = vec![vec![
            VulnixRes {
                name: "ncurses-6.1",
                pname: "ncurses",
                version: "6.1",
                affected_by: vec!["CVE-2018-10754"],
            },
            VulnixRes {
                name: "libtiff-4.0.9",
                pname: "libtiff",
                version: "4.0.9",
                affected_by: vec!["CVE-2018-17000", "CVE-2018-17100", "CVE-2018-17101"],
            },
        ]];
        assert_eq!(
            transform(&scan).unwrap(),
            [
                (
                    "libtiff-4.0.9",
                    aff(
                        "libtiff",
                        "4.0.9",
                        &["CVE-2018-17000", "CVE-2018-17100", "CVE-2018-17101"],
                        &[0b1, 0b1, 0b1]
                    )
                ),
                (
                    "ncurses-6.1",
                    aff("ncurses", "6.1", &["CVE-2018-10754"], &[0b1])
                ),
            ]
            .iter()
            .cloned()
            .collect()
        )
    }

    #[test]
    fn decode_scan_multiple_branches() {
        let scan = vec![
            vec![VulnixRes {
                name: "libtiff-4.0.9",
                pname: "libtiff",
                version: "4.0.9",
                affected_by: vec!["CVE-2018-17100", "CVE-2018-17101"],
            }],
            vec![VulnixRes {
                name: "libtiff-4.0.9",
                pname: "libtiff",
                version: "4.0.9",
                affected_by: vec!["CVE-2018-17101"],
            }],
        ];
        assert_eq!(
            transform(&scan).unwrap(),
            [(
                "libtiff-4.0.9",
                aff(
                    "libtiff",
                    "4.0.9",
                    &["CVE-2018-17100", "CVE-2018-17101"],
                    &[0b01, 0b11]
                )
            )]
            .iter()
            .cloned()
            .collect()
        )
    }

    fn ticket(affected: &Affected, branches: &Branches) -> String {
        let mut buf = Vec::new();
        affected.write_ticket(&mut buf, 1, branches).ok();
        String::from_utf8(buf).unwrap()
    }

    #[test]
    fn rendered_ticket() -> Fallible<()> {
        let libtiff = aff(
            "libtiff",
            "4.0.9",
            &["CVE-2018-17100", "CVE-2018-17101"],
            &[0b01, 0b11],
        );
        let branches = &create_branches(&[
            "nixos-18.09=5d4a1a3897e2d674522bcb3aa0026c9e32d8fd7c",
            "nixos-unstable=80738ed9dc0ce48d7796baed5364eef8072c794d",
        ])?;
        assert_eq!(ticket(&libtiff, branches), "\
# Vulnerability roundup 1: libtiff-4.0.9: 2 advisories\n\
\n\
[search](https://search.nix.gsc.io/?q=libtiff&i=fosho&repos=nixos-nixpkgs), \
[files](https://github.com/NixOS/nixpkgs/search?utf8=%E2%9C%93&q=libtiff+in%3Apath&type=Code)\n\
\n\
* [ ] [CVE-2018-17100](https://nvd.nist.gov/vuln/detail/CVE-2018-17100) (nixos-18.09)\n\
* [ ] [CVE-2018-17101](https://nvd.nist.gov/vuln/detail/CVE-2018-17101) (nixos-18.09, nixos-unstable)\n\
\n\
Scanned versions: nixos-18.09: 5d4a1a3897e; nixos-unstable: 80738ed9dc0. \
May contain false positives.\n\
        ");
        Ok(())
    }

    #[test]
    fn print_only_relevant_branches() -> Fallible<()> {
        let libtiff = aff("libtiff", "4.0.9", &["CVE-2018-17100"], &[0b01]);
        let branches = &create_branches(&[
            "nixos-18.09=5d4a1a3897e2d674522bcb3aa0026c9e32d8fd7c",
            "nixos-unstable=80738ed9dc0ce48d7796baed5364eef8072c794d",
        ])?;
        let ticket = ticket(&libtiff, branches);
        assert!(
            ticket.contains("versions: nixos-18.09: 5d4a1a3897e. May"),
            format!("branch summary not correct:\n{}", ticket)
        );
        Ok(())
    }

    fn mk_vuln(branchmap: u32) -> VulnByBranch {
        VulnByBranch::from_branchmap(Advisory::CVE { y: 0, n: 0 }, branchmap)
    }

    #[test]
    fn decode_names() {
        let b = create_branches(&["a", "b", "c"]).unwrap();
        assert_eq!(mk_vuln(0b000).decode(&b), &[] as &[&str]);
        assert_eq!(mk_vuln(0b001).decode(&b), &["a"]);
        assert_eq!(mk_vuln(0b110).decode(&b), &["b", "c"]);
    }
}
