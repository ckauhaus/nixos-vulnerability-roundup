use colored::*;
use failure::Fallible;
use scan::{Branches, VulnixRes};
use std::collections::HashMap;
use std::io::Write;

#[derive(Debug, Clone, Default, PartialEq, Serialize)]
pub struct Affected {
    pname: String,
    version: String,
    advisories: Vec<String>,
    // Affected flag by branch: for each advisory, if a branch is affected, the bit according to
    // the branch index is set
    branchmap: Vec<u64>,
}

impl Affected {
    fn new(pname: String, version: String) -> Self {
        Self {
            pname,
            version,
            ..Default::default()
        }
    }

    pub fn write_ticket(
        &self,
        file: &mut dyn Write,
        name: &str,
        iteration: u32,
        branches: &Branches,
    ) -> Fallible<()> {
        println!("{} {}", "* Ticket for".cyan(), name.yellow());
        let num = self.advisories.len();
        let adv = if num == 1 { "advisory" } else { "advisories" };
        writeln!(file, "\
# Vulnerability roundup {iteration}: {name}: {num} {adv}\n\
\n\
[search](https://search.nix.gsc.io/?q={pname}&i=fosho&repos=nixos-nixpkgs), \
[files](https://github.com/NixOS/nixpkgs/search?utf8=%E2%9C%93&q={pname}+in%3Apath&type=Code)\n\
        ", iteration=iteration, name=name, num=num, adv=adv, pname=self.pname)?;
        for (i, adv) in self.advisories.iter().enumerate() {
            let applicable = branches.decode(self.branchmap[i]).join(", ");
            writeln!(
                file,
                "* [ ] [{adv}](https://nvd.nist.gov/vuln/detail/{adv}) ({applicable})",
                adv = adv,
                applicable = applicable
            )?;
        }
        Ok(())
    }
}

pub type Packages = HashMap<String, Affected>;

/// Consolidates per-branch scan results into a per-package overview
pub fn transform(scan_by_branch: Vec<Vec<VulnixRes>>) -> Fallible<Packages> {
    let mut pkgs = HashMap::new();
    for (nbranch, scan) in scan_by_branch.into_iter().enumerate() {
        for res in scan {
            let affected = pkgs
                .entry(res.name)
                .or_insert(Affected::new(res.pname, res.version));
            for adv in res.affected_by {
                match affected.advisories.iter().position(|s| s == &adv) {
                    Some(pos) => affected.branchmap[pos] |= 1 << nbranch,
                    None => {
                        affected.advisories.push(adv);
                        affected.branchmap.push(1 << nbranch);
                    }
                }
            }
        }
    }
    Ok(pkgs)
}

// === Tests ===

#[cfg(test)]
mod tests {
    use super::*;

    /// Helper to construct an `Affected` value quickly
    fn aff(pname: &str, version: &str, advisories: &[&str], branchmap: &[u64]) -> Affected {
        Affected {
            pname: pname.into(),
            version: version.into(),
            advisories: advisories.into_iter().map(|&e| e.to_owned()).collect(),
            branchmap: branchmap.to_vec(),
        }
    }

    #[test]
    fn decode_scan_single_branch() {
        let scan = vec![vec![
            VulnixRes {
                name: "ncurses-6.1".into(),
                pname: "ncurses".into(),
                version: "6.1".into(),
                affected_by: vec!["CVE-2018-10754".into()],
            },
            VulnixRes {
                name: "libtiff-4.0.9".into(),
                pname: "libtiff".into(),
                version: "4.0.9".into(),
                affected_by: vec!["CVE-2018-17000", "CVE-2018-17100", "CVE-2018-17101"]
                    .into_iter()
                    .map(Into::into)
                    .collect(),
            },
        ]];
        assert_eq!(
            transform(scan).unwrap(),
            [
                (
                    "libtiff-4.0.9".into(),
                    aff(
                        "libtiff",
                        "4.0.9",
                        &["CVE-2018-17000", "CVE-2018-17100", "CVE-2018-17101"],
                        &[0b1, 0b1, 0b1]
                    )
                ),
                (
                    "ncurses-6.1".into(),
                    aff("ncurses", "6.1", &["CVE-2018-10754"], &[0b1])
                ),
            ]
                .iter()
                .cloned()
                .collect()
        )
    }
}
