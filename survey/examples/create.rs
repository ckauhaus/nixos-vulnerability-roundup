use futures::prelude::*;
use hubcaps::issues::IssueOptions;
use hubcaps::{Credentials, Github};
use std::env;
use std::error::Error;
use tokio;

fn main() -> Result<(), Box<dyn Error>> {
    dotenv::dotenv().ok();
    let token = env::var("GITHUB_TOKEN").expect("GITHUB_TOKEN missing");
    let owner = env::var("OWNER").expect("OWNER missing");
    let repo = env::var("REPO").expect("REPO missing");
    let github = Github::new(
        String::from("vulnerability roundup"),
        Credentials::Token(token),
    );
    let issues = github.repo(owner, repo).issues();
    let f = issues
        .create(&IssueOptions {
            title: "survey test ticket".to_owned(),
            body: None,
            assignee: None,
            milestone: None,
            labels: vec![],
        })
        .and_then(|iss| {
            println!("issue created: {}", iss.url);
            Ok(())
        });
    let mut rt = tokio::runtime::Runtime::new().unwrap();
    rt.block_on(f)?;
    Ok(())
}
