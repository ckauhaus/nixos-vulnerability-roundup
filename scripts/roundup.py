#!/usr/bin/env python3

import argparse
import json
import os
import os.path as p
import subprocess

import ticket

WHITELIST_SRC = ('https://raw.githubusercontent.com/ckauhaus/'
                 'nixos-vulnerability-roundup/master/whitelists/{}.toml')


def instantiate(commit, nixpkgs):
    print('* Checking out', commit, 'in', nixpkgs)
    subprocess.run(['git', 'checkout', '-q', commit], check=True, cwd=nixpkgs)
    print('* Instantiating...')
    proc = subprocess.run(
        ['nix-instantiate', '-I', 'nixpkgs=.', 'nixos/release-combined.nix'],
        stdout=subprocess.PIPE, check=True, cwd=nixpkgs)
    drv = proc.stdout.decode().strip()
    print(drv)
    assert drv.startswith('/nix/store'), 'Nix store path expected'
    return drv


def ensure_dir(n):
    try:
        os.mkdir(p.join('roundups', str(n)))
    except OSError:
        pass


def roundup(n, release, commit, drv, vulnix):
    ensure_dir(n)
    old_wl = WHITELIST_SRC.format(release)
    new_wl = p.join('whitelists', '{}.toml'.format(release))
    json_file = p.join('roundups', str(n), 'vulnix.{}.json'.format(release))
    ticket_file = p.join('roundups', str(n), 'ticket.{}.md'.format(release))
    with open(json_file, 'w') as f:
        subprocess.run(
            [vulnix, '-j', '-w', old_wl, '-W', new_wl, drv], stdout=f)
    with open(ticket_file, 'w') as tkt:
        with open(json_file) as f:
            ticket.output(commit, json.load(f), tkt)
    print('* Ticket for {}:'.format(release), ticket_file)


def main():
    a = argparse.ArgumentParser()
    a.add_argument('-n', '--nixpkgs', default='../nixpkgs',
                   help='checkout to use as source (default: %(default)s)')
    a.add_argument('-v', '--vulnix', metavar='PATH', default='vulnix',
                   help='vulnix executable to use')
    a.add_argument('N', type=int, help='vulnerability roundup number')
    a.add_argument('RELEASE=GITID', nargs='+',
                   help='space separated list of pairs that map a release to '
                   'a specific commit id, e.g.: release-18.03=06c576b0525')
    args = a.parse_args()

    # avoid GC errors like
    # `Too many heap sections: Increase MAXHINCR or MAX_HEAP_SECTS`
    os.environ['GC_INITIAL_HEAP_SIZE'] = '4G'

    for pair in vars(args)['RELEASE=GITID']:
        release, gitid = pair.split('=')
        drv = instantiate(gitid, args.nixpkgs)
        roundup(args.N, release, gitid, drv, args.vulnix)


if __name__ == '__main__':
    main()
