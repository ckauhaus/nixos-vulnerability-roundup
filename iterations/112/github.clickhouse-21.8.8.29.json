{
  "ticket": {
    "iteration": 112,
    "pkg": "clickhouse-21.8.8.29",
    "affected": {
      "CVE-2021-43305": {
        "branches": [
          {
            "name": "nixos-21.11",
            "rev": "efea022d6fe0da84aa6613d4ddeafb80de713457"
          }
        ],
        "score": 8.8,
        "description": "Heap buffer overflow in Clickhouse's LZ4 compression codec when parsing a malicious query. There is no verification that the copy operations in the LZ4::decompressImpl loop and especially the arbitrary copy operation wildCopy<copy_amount>(op, ip, copy_end), don’t exceed the destination buffer’s limits. This issue is very similar to CVE-2021-43304, but the vulnerable copy operation is in a different wildCopy call."
      },
      "CVE-2021-42390": {
        "branches": [
          {
            "name": "nixos-21.11",
            "rev": "efea022d6fe0da84aa6613d4ddeafb80de713457"
          }
        ],
        "score": 6.5,
        "description": "Divide-by-zero in Clickhouse's DeltaDouble compression codec when parsing a malicious query. The first byte of the compressed buffer is used in a modulo operation without being checked for 0."
      },
      "CVE-2021-42387": {
        "branches": [
          {
            "name": "nixos-21.11",
            "rev": "efea022d6fe0da84aa6613d4ddeafb80de713457"
          }
        ],
        "score": 8.1,
        "description": "Heap out-of-bounds read in Clickhouse's LZ4 compression codec when parsing a malicious query. As part of the LZ4::decompressImpl() loop, a 16-bit unsigned user-supplied value ('offset') is read from the compressed data. The offset is later used in the length of a copy operation, without checking the upper bounds of the source of the copy operation."
      },
      "CVE-2021-42388": {
        "branches": [
          {
            "name": "nixos-21.11",
            "rev": "efea022d6fe0da84aa6613d4ddeafb80de713457"
          }
        ],
        "score": 8.1,
        "description": "Heap out-of-bounds read in Clickhouse's LZ4 compression codec when parsing a malicious query. As part of the LZ4::decompressImpl() loop, a 16-bit unsigned user-supplied value ('offset') is read from the compressed data. The offset is later used in the length of a copy operation, without checking the lower bounds of the source of the copy operation."
      },
      "CVE-2021-42391": {
        "branches": [
          {
            "name": "nixos-21.11",
            "rev": "efea022d6fe0da84aa6613d4ddeafb80de713457"
          }
        ],
        "score": 6.5,
        "description": "Divide-by-zero in Clickhouse's Gorilla compression codec when parsing a malicious query. The first byte of the compressed buffer is used in a modulo operation without being checked for 0."
      },
      "CVE-2021-42389": {
        "branches": [
          {
            "name": "nixos-21.11",
            "rev": "efea022d6fe0da84aa6613d4ddeafb80de713457"
          }
        ],
        "score": 6.5,
        "description": "Divide-by-zero in Clickhouse's Delta compression codec when parsing a malicious query. The first byte of the compressed buffer is used in a modulo operation without being checked for 0."
      },
      "CVE-2021-43304": {
        "branches": [
          {
            "name": "nixos-21.11",
            "rev": "efea022d6fe0da84aa6613d4ddeafb80de713457"
          }
        ],
        "score": 8.8,
        "description": "Heap buffer overflow in Clickhouse's LZ4 compression codec when parsing a malicious query. There is no verification that the copy operations in the LZ4::decompressImpl loop and especially the arbitrary copy operation wildCopy<copy_amount>(op, ip, copy_end), don’t exceed the destination buffer’s limits."
      }
    },
    "maintainers": [
      {
        "github": "orivej",
        "email": "orivej@gmx.fr"
      }
    ]
  },
  "issue_id": 166622,
  "issue_url": "https://api.github.com/repos/NixOS/nixpkgs/issues/166622"
}
